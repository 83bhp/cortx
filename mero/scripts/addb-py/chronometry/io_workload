#!/usr/bin/env bash
#set -x
set -e

SCRIPT_NAME=`echo $0 | awk -F "/" '{print $NF}'`
SCRIPT_PATH="$(readlink -f $0)"
SCRIPT_DIR="${SCRIPT_PATH%/*}"
MERO_SRC_DIR="${SCRIPT_PATH%/*/*/*/*}"
HALON_SRC_DIR="${SCRIPT_PATH%/*/*/*/*/*}/halon"
CURENT_DIR=`pwd`
ARTIFACTS_TOP_DIR=$CURENT_DIR/m0crate_artifacts_`date '+%Y-%m-%d_%H.%M.%S'`

MERO_CONF_FILE="/etc/sysconfig/mero"
OVERRIDE_MERO_CONF_PARAMS=""

HALOND_CONF_FILE="/etc/sysconfig/halond"
HALON_FACTS_FILE="/etc/halon/halon_facts.yaml"

# functions check_root(), _check_is_cluster_online()
. ${SCRIPT_DIR}/common_funcs

CONFS=(
    "LAYOUT_ID=1 CLOVIS_IOSIZE=4k BLOCK_SIZE=4k NR_THREADS=1"
)

function restart_cluster()
{
    _info 'cluster restart'

    set +e
    # remove old config
    systemctl start halon-cleanup
    systemctl start mero-cleanup
    set -e
    $MERO_SRC_DIR/utils/m0setup -c

    # remove halon/mero services from cluster
    $HALON_SRC_DIR/scripts/install-halon-services -u
    $MERO_SRC_DIR/scripts/install-mero-service -u

    # install halon/mero service to cluster
    $HALON_SRC_DIR/scripts/install-halon-services -l
    $MERO_SRC_DIR/scripts/install-mero-service -l

    if [[ -n $CLUSTER_CONFIGS_DIR ]]; then
        # create configs for skln3 cluster
        _info "copying cluster config files from $CLUSTER_CONFIGS_DIR"
        cp $CLUSTER_CONFIGS_DIR/halond $HALOND_CONF_FILE
        cp $CLUSTER_CONFIGS_DIR/mero $MERO_CONF_FILE
        cp $CLUSTER_CONFIGS_DIR/halon_facts.yaml $HALON_FACTS_FILE
    elif [[ -z "$PATH_TO_CONFIG" ]]; then
        # create cluster config (for dev vm)
        $MERO_SRC_DIR/utils/m0setup --halon-facts --clovis-apps
    else
        # create halon facts (for sati30a)
        $MERO_SRC_DIR/utils/m0genfacts -c $PATH_TO_CONFIG \
                                       -o /etc/halon/halon_facts.yaml -e mgmt0

        local mgmt_ip=`ifconfig | grep mgmt0 -A 1 | grep inet | awk '{print $2}'`

        if [[ -n "$mgmt_ip" ]]; then
            echo "set HALOND_LISTEN to $mgmt_ip"
            local ip_regexp="([0-9]{1,3}\.){3}[0-9]{1,3}:[0-9]{4,}"
            sed -r -i "s/HALOND_LISTEN=$ip_regexp/HALOND_LISTEN=$mgmt_ip:9070/" \
                /etc/sysconfig/halond
        fi
    fi

    override_mero_conf $OVERRIDE_MERO_CONF_PARAMS

    # start cluster
    systemctl start halond
    hctl mero bootstrap
}

function create_artifacts_dir() {
    ARTIFACTS_DIR=${ARTIFACTS_TOP_DIR}/`echo $@ | sed -r -e 's/\s+/__/g' \
                                                    | sed -r 's/=/-/g'`
    mkdir -p $ARTIFACTS_DIR
}

function dump_m0traces() {
    for filename in m0trace.*; do
        _info "dump $filename"
        sudo $MERO_SRC_DIR/utils/trace/m0trace -i ${filename} -o ${filename}.txt
    done
}

function save_artifacts() {
    #save m0crate config
    mv $MERO_SRC_DIR/scripts/addb-py/chronometry/test_io*.yaml ./

    #save m0trace files (client and server side)
    local m0crate_m0trace_dir="m0trace_m0crate"
    mkdir -p $m0crate_m0trace_dir
    mv ./m0trace.* $m0crate_m0trace_dir
    pushd $m0crate_m0trace_dir
    dump_m0traces
    popd

    local ios_m0trace_dir="m0trace_ios"
    mkdir -p $ios_m0trace_dir
    local ioservice_fid=`hctl mero status | grep "\[.*\].*ioservice" \
                        | awk '{print $3}'`
    cp /var/mero/m0d-$ioservice_fid/m0trace.* $ios_m0trace_dir
    pushd $ios_m0trace_dir
    dump_m0traces
    popd

    #save addb store dumps
    $MERO_SRC_DIR/scripts/addb-py/chronometry/p0 dump --json all
    $MERO_SRC_DIR/scripts/addb-py/chronometry/p0 db dump*.txt

    rm ./m0trace.*
}

function check_and_stop_cluster() {
    if _check_is_cluster_online; then
        _info "stopping cluster before test"
        hctl mero stop
    fi
}

function wait_for_mero_start() {
    echo "wait for mero start"

    while ! _check_is_cluster_online
    do
        if _check_is_cluster_failed; then
            _err "cluster is failed"
            exit 1
        fi

        sleep 5
    done
}

function override_workload_conf() {
    [[ -z $CONFS_IS_OVERRIDED ]] && {
        _info "overriding workload configurations"
        CONFS=()
        CONFS_IS_OVERRIDED=1
    }
    CONFS+=("$1")
}

function override_mero_conf() {
    _info "overriding mero config parameters: $@"

    for param in $@; do
        local param_name=`echo "${param}" | awk -F "=" '{print $1}'`
        local param_value=`echo "${param}" | awk -F "=" '{print $2}'`

        sed -i "/.*${param_name}.*/d" $MERO_CONF_FILE
        param_value="$param_name=$param_value #changed by io_workload script"
        echo -e "\n$param_value" >> $MERO_CONF_FILE
    done
}

function start_stat_utils() {
    _info "starting dstat"
    dstat --output dstat.log.csv &>dstat.log &
    DSTAT_PID=$!

    _info "starting iostat"
    iostat 1 &>iostat.log &
    IOSTAT_PID=$!
}

function stop_stat_utils() {
    _info "stopping iostat"
    kill ${IOSTAT_PID}
    _info "stopping dstat"
    kill ${DSTAT_PID}
}

function run_tests() {
    for ((i = 0; i < $((${#CONFS[*]})); i++)); do
        conf=${CONFS[((i))]}

        echo "conf: "$conf
        if [[ -z $conf ]]; then
            continue
        fi

        restart_cluster
        wait_for_mero_start

        create_artifacts_dir $conf
        pushd $ARTIFACTS_DIR

        start_stat_utils
        _info "running test..."
        CLOVIS_PORTS="$M0CRATE_CLOVIS_PORTS" \
            $MERO_SRC_DIR/scripts/addb-py/chronometry/p0 run m0crate \
            $conf &> m0crate.log
        stop_stat_utils

        set +e
        hctl mero stop
        if [[ $? -ne 0 ]]; then
            _warn "Cluster stop FAILED! Trying to go further."
        fi
        set -e

        save_artifacts
        popd
    done
}

function usage() {
    cat << EOF

Usage: $SCRIPT_NAME [options]
    -c, --cluster-configs  directory containing config files for cluster.

        --config           specifying file for generation halon facts.

    -w, --workload_config  workload options. Overrides default m0crate config
                           file parameters.
                           Example: "CLOVIS_IOSIZE=4k BLOCK_SIZE=4k"

    -m, --mero_config      mero options. Overrides default mero config file
                           parameters.
                           Example: "MERO_TRACED_M0D=yes MERO_M0D_OPTS=1"

        --clovis-ports     clovis ports for using by m0crate instances.
                           This option allows to run multiple instances
                           of m0crate
                           Example: "302 303 304"

    -h, --help             this help

Example:
    $SCRIPT_NAME -w "CLOVIS_IOSIZE=4k BLOCK_SIZE=4k NR_THREADS=1"

EOF
}

function check_arg_value() {
    [[ $# -gt 1 ]] || {
        echo -e "Incorrect use of the option $1\nUse --help option"
        exit 1
    }
}

while [[ $# -gt 0 ]]; do
    case $1 in
        --config)
            check_arg_value $1 $2

            [[ -f "$2" ]] || {
                echo -e "File not exist: $2"
                exit 1
            }
            PATH_TO_CONFIG=$2
            shift
            ;;
        -w|--workload_config)
            check_arg_value $1 $2
            override_workload_conf "$2"
            shift
            ;;
        -m|--mero_config)
            check_arg_value $1 $2
            OVERRIDE_MERO_CONF_PARAMS=$2
            shift
            ;;
        -c|--cluster-configs)
            check_arg_value $1 $2

            [[ -d $2 ]] || {
                echo "Directory not exist: $2"
                exit 1
            }

            CLUSTER_CONFIGS_DIR=$2
            shift
            ;;
        --clovis-ports)
            check_arg_value $1 $2
            M0CRATE_CLOVIS_PORTS=$2
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo -e "Invalid option: $1\nUse --help option"
            exit 1
            ;;
    esac
    shift
done

_check_root
check_and_stop_cluster
run_tests

exit 0
