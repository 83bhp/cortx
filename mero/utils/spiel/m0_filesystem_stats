#!/usr/bin/env bash

#
#
# Script to calculate cluster size.
#
# Usage : ${SCRIPT_NAME}
#
# RETURN :
# 0 : SUCCESS
# 1 : System Error
# 2 : Client endpoint busy
#
# On Success returns
# free space        <int>
# available space   <int>
# total space       <int
# services total    <int
# services replied  <int
#
# Author : Yeshpal Jain
# email : yeshpal.jain@seagate.com
#
#

set -eu
#set -x
export PS4='+ ${FUNCNAME[0]:+${FUNCNAME[0]}():}line ${LINENO}: '

SCRIPT_NAME=`echo $0 | awk -F "/" '{print $NF}'`
STATUS_FILE=/var/mero/get_size_client
SAVEIFS=$IFS
LOCK_TIMEOUT=20
lnet_nids=$(lctl list_nids)
server_addr=""
client_addr=""
profile_addr=""
declare libmero_path="/usr/lib64/libmero.so"
declare m0spiel_path="/usr/bin/m0spiel"
declare consul_path="/opt/seagate/eos/hare/bin/consul"
declare python2_path="/usr/bin/python2"
consul_query_args="kv get -recurse m0conf"
consul_query_cmd="$consul_path $consul_query_args"

get_bin_path() {
	bin_name="$1"
	eval path_var="${bin_name}""_path"
	eval file_path=\${${bin_name}_path}
	if [ ! -e ${file_path} ] ; then
		declare $path_var=$(which $bin_name)
		eval file_path=\${${bin_name}_path}
	fi
        # return file_path string, Don't add any other echo statement
        # in this method.
	echo "$file_path"
}

check_bin_path() {
	bin_name="$1"
	eval file_path=\${${bin_name}_path}
	if [ ! -e ${file_path} ] ; then
		echo -e "ERROR: $bin_name does not exist"
		exit 1
	fi
}


check_lib_path() {
	arg1=$1
	lib_name="${arg1%.*}"
	eval path_var=\${${lib_name}_path}

	if [ ! -e ${path_var} ] ; then
		echo -e "ERROR: $lib_name does not exist"
		exit 1
	fi
}

fs_stats_fetch() {
$python2_path $m0spiel_path $M0_SPIEL_OPTS <<EOF

if spiel.cmd_profile_set(str(Fid($M0_PROFILE_ID))):
	sys.exit('cannot set profile')

if spiel.rconfc_start():
	sys.exit('cannot start rconfc')


fs_stats = FsStats()
rc = spiel.filesystem_stats_fetch(fs_stats)
if rc != 0:
	sys.exit('Error: filesystem stats fetch: \
                 (status {0})'.format(rc))

spiel.rconfc_stop()
print("  free space       {0:>20}".format(fs_stats.fs_free_disk))
print("  available space  {0:>20}".format(fs_stats.fs_avail_disk))
print("  total space      {0:>20}".format(fs_stats.fs_total_disk))
print("  services total   {0:>20}".format(fs_stats.fs_svc_total))
print("  services replied {0:>20}".format(fs_stats.fs_svc_replied))
EOF
}

# Get endpoints of local node's processes that run service(s) of given type.
get_endpoints_of() {
	local svc_type=$1

	$consul_query_cmd |
        awk -F/ -v host=$(hostname --fqdn) -v svc_type=$svc_type '
	$3 != host { next }
	$6 ~ /^endpoint:/ { sub(/^endpoint:/, "", $6); endpoints[$5] = $6 }
	$6 == "services" && match($7, "^" svc_type ":") { match_p[$5] = 1 }
	END { for (k in match_p) print endpoints[k] }
	'
}

get_ep_status()
{
	client_ep=$1
        # return endpoint running status from hctl,
	# Dont add any other echo statement in this method.
	echo "$(hctl status | grep $client_ep |  sed 's/.*\[\([^]]*\)\].*/\1/g' | sed 's/^[[:space:]]*//g')"
}

main()
{
	pid=$$
	python2_path=$(get_bin_path python2)
	m0spiel_path=$(get_bin_path m0spiel)
	check_bin_path python2
	check_bin_path m0spiel
	check_lib_path libmero.so

	if [ -z $server_addr ] ; then
		consul_path=$(get_bin_path consul)
		check_bin_path consul
		server_addr=$(get_endpoints_of ha | tail -1)
	fi

	if [ -z $profile_addr ] ; then
		profile_addr=$($consul_query_cmd | grep profiles: | sed -n -e 's/^.*\(profiles:\)/\1/p'  | awk '{print $1}'| sed 's/^[^:]*://' | sed 's/:/,/')
	fi

	if [ -z $client_addr ] ; then
		client_addr=$(get_endpoints_of m0_client_other | tail -1)
	fi

	M0_SPIEL_OPTS="-s $server_addr -l $libmero_path --client=$client_addr"
	M0_PROFILE_ID=$profile_addr

	exec {FD}<>$STATUS_FILE

	#Wait for $LOCK_TIMEOUT to acquire the lock
	if ! flock -x -w $LOCK_TIMEOUT $FD; then
		exit 2
	fi
	#Lock acquired, below command would be executed exclusively to current process
	echo $pid > $STATUS_FILE
	fs_stats_fetch
	rm $STATUS_FILE
}

function usage() {
    cat << EOF

Usage: $SCRIPT_NAME [options]
    -c, --clent            client endpoint address

    -s, --server           server endpoint address

    -p, --profile          profile endpoint address

    -l, --libmero_path     libmero path

    -h, --help             this help

Example:
    $SCRIPT_NAME  [-s ${lnet_nids}:12345:1:1] [-c ${lnet_nids}:12345:1:4]
                  [-p 0x7000000000000001,0x1e] [-l $libmero_path ]
    -c, -s, -l and -p are optional arguments

Note: $SCRIPT_NAME can be executed only by privileged user
EOF
}


function check_arg_value() {
    [[ $# -gt 1 ]] || {
        echo -e "Incorrect use of the option $1\nUse --help option"
        exit 1
    }
}

while [[ $# -gt 0 ]]; do
    case $1 in
        -c| --client)
            check_arg_value $1 $2
	    client_addr="$2"
            shift
            ;;
        -s| --server)
            check_arg_value $1 $2
            server_addr="$2"
            shift
            ;;
        -p| --profile)
            check_arg_value $1 $2
            profile_addr="$2"
            shift
            ;;
        -l| --libmero_path)
            check_arg_value $1 $2
            libmero_path=$2
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
    esac
    shift
done

main
